// <auto-generated />
using System;
using FlightBooker.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FlightBooker.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("FlightBooker.Server.Data.Models.Airline", b =>
                {
                    b.Property<int>("AirlineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("AirlineId"));

                    b.Property<string>("AirlineName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("AirlineId");

                    b.ToTable("Airlines");
                });

            modelBuilder.Entity("FlightBooker.Server.Data.Models.AirlineOperator", b =>
                {
                    b.Property<int>("AirlineOperatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("AirlineOperatorId"));

                    b.Property<int?>("AirlineId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("AirlineOperatorId");

                    b.HasIndex("AirlineId");

                    b.HasIndex("UserId");

                    b.ToTable("AirlineOperators");
                });

            modelBuilder.Entity("FlightBooker.Server.Data.Models.Airplane", b =>
                {
                    b.Property<int>("AirplaneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("AirplaneId"));

                    b.Property<string>("AirplaneBrand")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AirplaneModel")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<uint>("NrColumns")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("NrRows")
                        .HasColumnType("int unsigned");

                    b.HasKey("AirplaneId");

                    b.ToTable("Airplanes");
                });

            modelBuilder.Entity("FlightBooker.Server.Data.Models.AirplaneSeat", b =>
                {
                    b.Property<int>("AirplaneSeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("AirplaneSeatId"));

                    b.Property<int>("AirplaneId")
                        .HasColumnType("int");

                    b.Property<int>("SeatClassId")
                        .HasColumnType("int");

                    b.Property<string>("SeatColumn")
                        .IsRequired()
                        .HasColumnType("varchar(1)");

                    b.Property<uint>("SeatRow")
                        .HasColumnType("int unsigned");

                    b.HasKey("AirplaneSeatId");

                    b.HasIndex("AirplaneId");

                    b.HasIndex("SeatClassId");

                    b.ToTable("AirplaneSeats");
                });

            modelBuilder.Entity("FlightBooker.Server.Data.Models.Airport", b =>
                {
                    b.Property<string>("AirportCode")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("AirportName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("AirportCode");

                    b.ToTable("Airports");
                });

            modelBuilder.Entity("FlightBooker.Server.Data.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("FlightBooker.Server.Data.Models.Complaint", b =>
                {
                    b.Property<int>("ComplaintId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ComplaintId"));

                    b.Property<string>("AssignedAdminId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ComplainantId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("DateIssued")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateResolved")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsResolved")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("ComplaintId");

                    b.HasIndex("AssignedAdminId");

                    b.HasIndex("ComplainantId");

                    b.ToTable("Complaints");
                });

            modelBuilder.Entity("FlightBooker.Server.Data.Models.Flight", b =>
                {
                    b.Property<int>("FlightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("FlightId"));

                    b.Property<int>("AirplaneId")
                        .HasColumnType("int");

                    b.Property<string>("ArrivalAirportCode")
                        .IsRequired()
                        .HasColumnType("varchar(3)");

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("datetime(6)");

                    b.Property<TimeSpan?>("Delay")
                        .HasColumnType("time(6)");

                    b.Property<string>("DepartureAirportCode")
                        .IsRequired()
                        .HasColumnType("varchar(3)");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("RouteId")
                        .HasColumnType("int");

                    b.HasKey("FlightId");

                    b.HasIndex("AirplaneId");

                    b.HasIndex("ArrivalAirportCode");

                    b.HasIndex("DepartureAirportCode");

                    b.HasIndex("RouteId");

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("FlightBooker.Server.Data.Models.FlightSeat", b =>
                {
                    b.Property<int>("FlightSeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("FlightSeatId"));

                    b.Property<int>("AirplaneSeatId")
                        .HasColumnType("int");

                    b.Property<int>("FlightId")
                        .HasColumnType("int");

                    b.Property<int?>("ReservationId")
                        .HasColumnType("int");

                    b.HasKey("FlightSeatId");

                    b.HasIndex("AirplaneSeatId");

                    b.HasIndex("FlightId");

                    b.HasIndex("ReservationId");

                    b.ToTable("FlightSeats");
                });

            modelBuilder.Entity("FlightBooker.Server.Data.Models.Reservation", b =>
                {
                    b.Property<int>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ReservationId"));

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("RouteId")
                        .HasColumnType("int");

                    b.HasKey("ReservationId");

                    b.HasIndex("ClientId");

                    b.HasIndex("RouteId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("FlightBooker.Server.Data.Models.Route", b =>
                {
                    b.Property<int>("RouteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("RouteId"));

                    b.Property<int>("AirlineId")
                        .HasColumnType("int");

                    b.Property<string>("ArrivalAirportCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DepartureAirportCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Frequency")
                        .HasColumnType("int");

                    b.Property<bool>("IsRepeating")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("RouteGroupId")
                        .HasColumnType("int");

                    b.HasKey("RouteId");

                    b.HasIndex("AirlineId");

                    b.HasIndex("ArrivalAirportCode");

                    b.HasIndex("DepartureAirportCode");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("FlightBooker.Server.Data.Models.RouteSeatClass", b =>
                {
                    b.Property<int>("RouteSeatClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("RouteSeatClassId"));

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("RouteId")
                        .HasColumnType("int");

                    b.Property<int>("SeatClassId")
                        .HasColumnType("int");

                    b.HasKey("RouteSeatClassId");

                    b.HasIndex("RouteId");

                    b.HasIndex("SeatClassId");

                    b.ToTable("RouteSeatClasses");
                });

            modelBuilder.Entity("FlightBooker.Server.Data.Models.SeatClass", b =>
                {
                    b.Property<int>("SeatClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SeatClassId"));

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("SeatClassId");

                    b.HasIndex("ClassName")
                        .IsUnique();

                    b.ToTable("SeatClasses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FlightBooker.Server.Data.Models.AirlineOperator", b =>
                {
                    b.HasOne("FlightBooker.Server.Data.Models.Airline", "Airline")
                        .WithMany("Operators")
                        .HasForeignKey("AirlineId");

                    b.HasOne("FlightBooker.Server.Data.Models.AppUser", "User")
                        .WithMany("AirlineOperators")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Airline");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlightBooker.Server.Data.Models.AirplaneSeat", b =>
                {
                    b.HasOne("FlightBooker.Server.Data.Models.Airplane", "Airplane")
                        .WithMany("AirplaneSeats")
                        .HasForeignKey("AirplaneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightBooker.Server.Data.Models.SeatClass", "SeatClass")
                        .WithMany()
                        .HasForeignKey("SeatClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Airplane");

                    b.Navigation("SeatClass");
                });

            modelBuilder.Entity("FlightBooker.Server.Data.Models.Complaint", b =>
                {
                    b.HasOne("FlightBooker.Server.Data.Models.AppUser", "AssignedAdmin")
                        .WithMany()
                        .HasForeignKey("AssignedAdminId");

                    b.HasOne("FlightBooker.Server.Data.Models.AppUser", "Complainant")
                        .WithMany()
                        .HasForeignKey("ComplainantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedAdmin");

                    b.Navigation("Complainant");
                });

            modelBuilder.Entity("FlightBooker.Server.Data.Models.Flight", b =>
                {
                    b.HasOne("FlightBooker.Server.Data.Models.Airplane", "Airplane")
                        .WithMany()
                        .HasForeignKey("AirplaneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightBooker.Server.Data.Models.Airport", "ArrivalAirport")
                        .WithMany()
                        .HasForeignKey("ArrivalAirportCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightBooker.Server.Data.Models.Airport", "DepartureAirport")
                        .WithMany()
                        .HasForeignKey("DepartureAirportCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightBooker.Server.Data.Models.Route", "Route")
                        .WithMany("Flights")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Airplane");

                    b.Navigation("ArrivalAirport");

                    b.Navigation("DepartureAirport");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("FlightBooker.Server.Data.Models.FlightSeat", b =>
                {
                    b.HasOne("FlightBooker.Server.Data.Models.AirplaneSeat", "AirplaneSeat")
                        .WithMany()
                        .HasForeignKey("AirplaneSeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightBooker.Server.Data.Models.Flight", "Flight")
                        .WithMany("FlightSeats")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightBooker.Server.Data.Models.Reservation", "Reservation")
                        .WithMany("FlightSeats")
                        .HasForeignKey("ReservationId");

                    b.Navigation("AirplaneSeat");

                    b.Navigation("Flight");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("FlightBooker.Server.Data.Models.Reservation", b =>
                {
                    b.HasOne("FlightBooker.Server.Data.Models.AppUser", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightBooker.Server.Data.Models.Route", "Route")
                        .WithMany("Reservations")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("FlightBooker.Server.Data.Models.Route", b =>
                {
                    b.HasOne("FlightBooker.Server.Data.Models.Airline", "Airline")
                        .WithMany()
                        .HasForeignKey("AirlineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightBooker.Server.Data.Models.Airport", "ArrivalAirport")
                        .WithMany()
                        .HasForeignKey("ArrivalAirportCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightBooker.Server.Data.Models.Airport", "DepartureAirport")
                        .WithMany()
                        .HasForeignKey("DepartureAirportCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Airline");

                    b.Navigation("ArrivalAirport");

                    b.Navigation("DepartureAirport");
                });

            modelBuilder.Entity("FlightBooker.Server.Data.Models.RouteSeatClass", b =>
                {
                    b.HasOne("FlightBooker.Server.Data.Models.Route", "Route")
                        .WithMany("RouteSeatClasses")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightBooker.Server.Data.Models.SeatClass", "SeatClass")
                        .WithMany()
                        .HasForeignKey("SeatClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Route");

                    b.Navigation("SeatClass");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FlightBooker.Server.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FlightBooker.Server.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightBooker.Server.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FlightBooker.Server.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FlightBooker.Server.Data.Models.Airline", b =>
                {
                    b.Navigation("Operators");
                });

            modelBuilder.Entity("FlightBooker.Server.Data.Models.Airplane", b =>
                {
                    b.Navigation("AirplaneSeats");
                });

            modelBuilder.Entity("FlightBooker.Server.Data.Models.AppUser", b =>
                {
                    b.Navigation("AirlineOperators");
                });

            modelBuilder.Entity("FlightBooker.Server.Data.Models.Flight", b =>
                {
                    b.Navigation("FlightSeats");
                });

            modelBuilder.Entity("FlightBooker.Server.Data.Models.Reservation", b =>
                {
                    b.Navigation("FlightSeats");
                });

            modelBuilder.Entity("FlightBooker.Server.Data.Models.Route", b =>
                {
                    b.Navigation("Flights");

                    b.Navigation("Reservations");

                    b.Navigation("RouteSeatClasses");
                });
#pragma warning restore 612, 618
        }
    }
}
